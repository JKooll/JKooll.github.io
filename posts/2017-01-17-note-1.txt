---
title: 锋利的JQuery
date: 2017-01-17 17:50:53
categories:
- 笔记
- JavaScript
tags:
- jQuery
---
## $()
- $(document).ready(function() {});

- $(function() {});

## JQuery选择器

### 基本选择器
| 选择器     | 描述     | 返回 | 示例|
| :------------- | :------------- |
| #id | 根据给定的id匹配一个元素 | 单个元素 | $("#test")选取id为test的元素 |
| .class | 根据给定的元素名匹配一个元素 | 集合元素 | $(".test")选取所有class为test的元素|
| element | 根据给定的元素名匹配元素 | 集合元素 | $("p")选取所有的<p>元素 |
| * | 匹配所有元素 | 集合元素 | $("*")选取所有的元素 |
| selector, selector2, ... , selectorN | 将每一个选择器匹配到的元素合并后一起返回| 集合元素 | $("div,span,p.myClass")选取所有<div>,<span>和拥有class为myClass的<p>标签的一组元素 |

### 层次选择器
| 选择器 | 描述 | 返回 | 示例 |
| :------------- | :------------- |
| $("ancestor descendant")| 选取 ancestor 元素里的素有descendant(后代) | 集合元素 | $("div span")选取<div>里的所有的<span>元素 |
| $("parent > child") | 选取parent元素的child（子）元素，与$("ancestor descendant")有区别，$("ancestor descendant")选择的是后代元素 | 集合元素 | $("div > span")选取<div>元素下元素名是<span>的子元素 |
| $("prev + next") | 选取紧接在prev元素后的next元素 | 集合元素 | $(".one + div")选取class为one的下一个<div>元素 |
| $("prev~sibligns") | 选取prev元素之后的所有siblings元素 | 集合元素 | $("#two~div")选取id为two的元素后面的所有<div>兄弟元素 |

### 过滤选择器

#### 基本过滤选择器
| 选择器 | 描述 | 返回 | 示例 |
| :------------- | :------------- |
| :first | 选择第1个元素 | 单个元素 | $("div:last")选取所有<div>元素中第一个<div>元素 |
| :last | 选取最后一个元素 | 单个元素 | $("div:last")选取所有<div>元素中最后一个<div>元素 |
| :not(selector) | 去除所有与给定选择器匹配的元素 | 集合元素 | $("input:not(.myClass)")选取class不是myClass的input元素 |
| :even | 选取索引是偶数的所有元素，索引从0开始 | 集合元素 | $("input:even")选取索引是偶数的input元素 |
| :odd | 选取索引是奇数的所有元素，索引从0开始 | 集合元素 | $("input:even")选取索引是奇数的input元素 |
| :eq(index) | 选取索引等于index的元素(index从0开始) | 单个元素 | $("input:eq(1)")选取索引等于1的input元素 |
| :gt(index) | 选取索引大于index的元素(index从0开始) | 集合元素 | $("input:gt(1)")选取索引大于1的input元素（注：大于1，而不包括1）|
| :lt(index) | 选取索引小于index的元素(index从0开始) | 集合元素 | $("input:lt(1)")选取索引小于1的input元素（注：小于1，而不包括1）|
| :header | 选取所有的标题元素，例如h1, h2, h3等 | 集合元素 | $(":header")选取网页所有的h1, h2, h3 ... |
| :animated | 选取当前正在执行动画的所有元素 | 集合元素 | $("div:animated") 选取正在执行动画的div元素 |

#### 内容过滤选择器
|  选择器 | 描述 | 返回 | 示例 |
| :------------- | :------------- |
| :contains(text) | 选取含有文本内容为“text”的元素 | 集合元素 | $("div:contains('me')")选取含有文本‘me’的div元素 |
| :empty | 选取不包含元素或者文本的空元素 | 集合元素 | $("div:empty")选取不包含子元素（包括文本元素）的div空元素 |
| :has(selector) | 选取含有选择器所匹配的元素的元素 | 集合元素 | $("div:has(p)")选取含有p元素的div元素 |
| :parent | 选取含有子元素或者文本的元素 | 集合元素 | $("div:parent")选取拥有子元素（包括文本元素）的div元素 |

#### 可见过滤选择器
| 选择器 | 描述 | 返回 | 示例 |
| :------------- | :------------- |
| :hidden | 选取所有不可见的元素 | 集合元素 | $(":hidden")选取所有不可见的元素。包括 input type="hidden", div style="display:none;"和div style="visibility:hidden;"等元素。如果只想选取input元素，可以使用$("input:hidden") |
| :visible | 选取所有可见的元素 | 集合元素 | $("div:visible")选取所有可见的div元素 |

#### 属性过滤选择器
| 选择器 | 描述 | 返回 | 示例 |
| :------------- | :------------- |
| [attribute] | 选取拥有此属性的元素 | 集合元素 | $("div[id]")选取拥有属性id的元素 |
| [attribute=value] | 选取属性的值为value的元素 | 集合元素 | $("div[title=test]")选取属性title为"test"的div元素 |
| [attribute!=value] | 选取属性的值不等于value的元素 | 集合元素 | $("div[title!=test]")选取属性title不等于"test"的div元素（注意：没有属性title的div元素也会被选取）|
| [attribute^=value] | 选取属性的值以value开头的元素 | 集合元素 | $("div[title^=test]")选取属性title以“test”开头的div元素 |
| [attribute$=value] | 选取属性的值以value结束的元素 | 集合元素 | $("div[title$=test]")选取属性title以“test”结束的div元素 |
| [attribute*=value] | 选取属性的值含有value的元素 | 集合元素 | $("div[title*=test]")选取属性title含有"test"的div元素 |
| [selector1][selector2][selectorN] | 用属性选择器合并成一个复合属性选择器，满足多个条件。每选择一次，缩小一次范围 | 集合元素 | $("div[id][title$='test']")选择拥有属性id，并且属性title以"test"结束的div元素 |

#### 子元素过滤选择器
| 选择器 | 描述 | 返回 | 示例 |
| :------------- | :------------- |
| :nth-child(index/even/odd/equation) | 选取每个父元素下的第index个子元素或者奇偶元素（index从1算起）| 集合元素 | :eq（index）只匹配一个元素，而:nth-child将为每一个父元素匹配子元素，并且:nth-child(index)的index是从1开始的，而:eq(index)是从0算起的 |
| :first-child | 选取每个父元素的第1个子元素 | 集合元素 | :first 只返回单个元素，而:first-child选择符将为每个父元素匹配第1个子元素。例如$("ul li:first-child");选择每个 ul 中第1个 li 元素 |
| :last-child | 选择每个父元素的最后一个子元素 | 集合元素 | 同样，:last只返回单个元素，而:last-child选择符将为每个父元素匹配最后一个子元素。例如$("ul li:first-child")选择每个 ul 中最后一个 li 元素 |
| :only-child | 如果某个元素是它父元素中唯一的子元素，那么将会被匹配。如果父元素中含有其他元素，则不会被匹配 | 集合元素 | $("ul li:only-child") 在 ul 中选取是唯一子元素的 li 元素 |

#### 表单对象属性过滤选择器
| 选择器 | 描述 | 返回 | 示例 |
| :------------- | :------------- |
| :enabled | 选取所有可用元素 | 集合元素 | $("#form1:enabled") 选取 id 为"form1"的表单内的所有可用元素 |
| :disabled | 选取所有不可用元素 | 集合元素 | $("#form2:disbaled")选取id为"form2"的表单内的所有不可用元素 |
| :checked | 选取所有被选中的元素（单选框，复选框） | 集合元素 | $("input:checked")选取所有被选中的input元素 |
| :selected | 选取所有被选中的选项元素（下拉列表）| 集合元素 | $("select :selected")选取所有被选中的选项元素 |

### 表单选择器
| 选择器 | 描述 | 返回 | 示例|
| :------------- | :------------- |
| :input | 选取所有的input, textarea, select, button 元素| 集合元素 | $(":input")选取所有input, textarea, select, button元素 |
| :text | 选取所有的单行文本框 | 集合元素 | $(":text")选取所有的单行文本框 |
| :password | 选取所有的密码框 | 集合元素 | $(":password")选取所有的密码框 |
| :radio | 选取所有的单选框 | 集合元素 | $(":radio")选取所有的单选框 |
| :checkbox | 选取所有的多选框 | 集合元素 | $(":checkbox")选取所有的提交按钮 |
| :submit | 选取所有的提交按钮 | 集合元素 | $(":submit")选取所有的提交按钮 |
| :image | 选取所有的图像按钮 | 集合元素 | $(":image")选取所有的图像按钮 |
| :reset | 选取所有的重置按钮 | 集合元素 | $(":reset") |
| :button | 选取所有的按钮 | 集合元素 | $("button") |
| :file | 选取所有的上传域 | 集合元素 | $(":file") |
| :hidden | 选取所有不可见元素 | 集合元素 | $(":hidden") |

### 选择器扩展
- MoreSelectors for JQuery
- Basic XPath

### 其他使用CSS选择器的方法
- document.getElementsBySelector()
- cssQuery()
- querySelectorAll()



## JQuery中的DOM操作

### DOM的操作分类
- DOM Core //任何一种支持DOM的程序设计语言都可以使用，用途并非仅限于处理网页，也可以用来处理任何一种使用标记语言编写出来的文档，例如XML
<pre>
document.getElementsByTagName("form"); //使用DOM Core来获取表单对象的方法
element.getAttribute("src"); //使用DOM Core来获取某种元素的src属性的方法
</pre>

- HTML-DOM
<pre>
document.forms; //使用HTML-DOM来获取表单对象的方法
element.src; //使用HTML-DOM来获取某元素的src属性的方法
</pre>

- CSS-DOM //针对CSS的操作。
<pre>
element.style.color = "red"; //设置某元素style对象字体颜色的方法
</pre>

### 查找元素节点
$("元素名 选择器");

### 查找属性节点
利用JQuery选择器查找到需要的元素之后 =》 使用attr()获取它的各种属性
<code>
var $para = $("p");
var p_txt = $para.attr("title");
</code>

### 创建节点

#### 创建元素节点
$("<li></li>");

#### 创建文本节点
$("<li>xxx</li>");

#### 创建属性节点
$("<li title='###'>xxx</li>");

### 插入节点
| 方法 | 描述 | 示例 |
| :------------- | :------------- |
| append() | 向每个匹配的元素内部追加内容 | <p>xxx</p> => $("p").append("<b>###</b>"); => <p>xxx<b>###</b></p> |
| appendTo() | 将所有匹配的元素追加到指定的元素中。实际上，使用该方法是颠倒了常规的$(A).append(B)的操作，即不是将B追加到A中，而是将A追加到B中 | |
| prepend() | 向每个匹配的元素内部前置内容 | <p>xxx</p> => $("p").append("<b>###</b>"); => <p><b>###</b>xxx</p> |
| prependTo() | 将所有匹配的元素前置到指定的元素中。实际上，使用该方法是颠倒了常规的$(A).prepend(B)的操作，即不是将B前置到A中，而是将A前置到B中。 | |
| after() | 在每个匹配的元素之后插入内容 | <p>xxx</p> => $("p").after("<b>###</b>"); => <p>xxx</p><b>###</b> |
| insertAfter() | 将所有匹配的元素插入到指定元素的后面。实际上，使用该方法是颠倒了常规的$(A).after(B)的操作，即不是讲B插入到A后面，而是将A插入到B后面 | |
| before() | 在每个匹配的元素之前插入内容 | <p>xxx</p> => $("p").before("<b>###</b>"); => <b>###</b><p>xxx</p> |
| insertBefore() | 将所有匹配的元素插入到指定的元素的前面。实际上，使用该方法是颠倒了常规的$(A).before(B)的操作，即不是将B插入到A的前面，而是将A插入到B前面 | | |
### 删除节点
- remove() //从DOM中删除所有匹配的元素，传入的参数用于根据JQuery表达式来筛选元素。
$("匹配节点的表达式").remove();

- empty() //不是删除元素节点，而是清空元素节点，它能清空元素中的所有后代节点。
$("匹配节点的表达式").empty();

### 复制节点
- clone()
<code>
$("ul li").click(function(){
    $(this).clone().appendTo("ul");
});
</code>
复制节点之后，被复制的新元素并不具备任何行为。如果需要新元素具有相同的行为（本例中是点击事件），可以给clone传递一个true参数。

### 替换节点
- replaceWith() //将所有匹配的元素都替换成指定的HTML或者DOM元素。例如:将所有的p标签替换成strong元素
<code>
$("p").replaecWith("<strong>xxx</strong>")
</code>

- replaceAll() //与replaceWith()方法的作用相同，只是颠倒了replaceWith()操作。
<code>
$("<strong>xxx</strong>").replaceAll("p")；
</code>
实现了与上例相同的效果。

> tip:如果在替换之前，已经为元素绑定事件，替换后原先绑定的事件将会与被替换的元素一起消失，需要在新元素上重新绑定事件。

### 包裹元素节点
- wrap()
<code>
$("strong").wrap("<b></b>")； => <b><strong></strong></b>
</code>

- wrapAll() //将所有匹配的元素用一个元素来包裹。不同于wrap(), wrap()方法是讲所有的元素进行单独的包裹。
<pre>
&lt;strong&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;/strong&gt;
</pre>
<pre>
$("strong").wrap("b"); =>
&lt;b&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/b&gt;
&lt;b&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/b&gt;
</pre>
<pre>
$("strong").wrapAll("b"); =>
&lt;b&gt;&lt;strong&gt;&lt;/strong&gt;
&lt;strong&gt;&lt;/strong&gt;&lt;/b&gt;
</pre>

- wrapInner() //将每一个匹配的元素的子内容（包括文本节点）用其他节结构化的标记包裹起来
<code>
&lt;strong&gt;xxx&lt;/strong&gt;
$("strong").wrapInner("<b></b>");
&lt;strong&gt;&lt;b&gt;xxx&lt;/b&gt;&lt;/strong&gt;
</code>

### 属性操作

#### 获取和设置属性
例如：
<pre>
var $para = $("p"); //获取p节点
var p_txt = $para.attr("title"); //获取p节点属性title
$("p").attr("title", "your title"); //设置单个的属性值
$("p").attr({"title" : "your title", "name" : "test"}); //通过key:val形式为匹配的对象同时设置多个属性
</pre>
> JQuery中的很多方法都是同一个函数实现获取（getter）和设置（setter）的，例如上面的attr()方法，类似的还有heml(), text(), height(), width(), val(), css()...

#### 删除属性
- removeAttr()
<code>$("p").removeAttr("title"); //删除p元素的属性title</code>

### 样式操作

#### 获取样式和设置样式
- attr()

#### 追加样式
- addClass()
<code>$("p").addClass("another") //给p追加another类</code>

>attr()和addClass()的区别：1. .attr('class', 'class name'), .addClass('class name'). 2.attr会覆盖之前的class，addClass追加class不会覆盖之前的class

#### 移除样式
- removeClass()
<pre>
$("p").removeClass("xxx"); //移除一个样式
$("p").removeClass("xxx").removeClass("xxx"); //移除多个个样式
</pre>

#### 切换样式
- [toggleClass()](http://api.jquery.com/toggleclass/)
<code>
$("p").toggleClass("another"); //在p中添加another类或隐藏another类
</code>

#### 判断是否含有某种样式
- hasClass("another");
<code>$("p").hasClass("another") //判断p中是否含有another类

### 设置和获取HTML，文本和值
- html() //此方法类似于JavaScript中的innerHTML属性，可以用来读取或者设置某个元素中的HTML内容
<pre>
$("p").html() //获取p元素的HTML代码
$("p").html("&lt;li&gt;&lt/li&gt;"); //设置p元素的HTML代码
</pre>

> tip:html()方法可以用于XHTML文档，但不能用于XML文档。

- text() //此方法类似JavaScript中的innerText属性，可以用来读取或者设置某个元素中的文本内容。
<pre>
$("p").text() //获取p元素的文本内容
$("p").text("xxx"); //设置p元素的文本内容
</pre>
 > (1)JavaScript中的innerText属性并不能在Firefox浏览器下运行[点这里](http://stackoverflow.com/questions/1359469/innertext-works-in-ie-but-not-in-firefox)，而JQuery的text()方法支持所有的浏览器。(2)text()方法对HTML文档和XML文档都有效。

- val() //此方法类似JavaScript中的value属性，可以用来设置和获取元素的值。无论元素是文本框，下拉列表还是单选框，它都可以返回元素的值。如果元素为多选，则返回一个包含所有选择的值的数组。
> 使用技巧:val()可以下拉框或下拉列表的选中想，通过更改下拉框或下拉列表的值，$("#singl2").val("item的value")，通过attr也可实现相同的效果，通过$("选中item").attr("selected/checked", true);

### 遍历节点
- children() //该方法用于匹配元素的子元素集合

>children()方法只考虑子元素而不考虑任何后代元素。

- next() //该方法用于取得匹配元素后面 ***紧邻的*** 同辈元素

- prev() //该方法用于取得匹配元素前面 ***紧邻的*** 的同辈元素

- siblings() //该方法用于取得匹配元素前后所有的同辈元素

- closest() //用来获取最近的匹配元素。首先检查当前元素是否匹配，如果匹配则直接返回元素本身。如果不匹配则向上查找父元素，逐级向上直到找到匹配选择器的元素。如果什么都没找到则返回一个空的JQuery对象。

> JQuery其他遍历节点的方法：find(), filter(), nextAll(), prevAll(), parent(), parents()...

### CSS-DOM操作

####　获取和设置元素的样式属性
- css()
<pre>
$("p").css("color"); //获取ｐ元素的样式颜色
$("p").css("color", "red"); //设置ｐ元素的样式颜色为红色
$("p").css({"fontSize" : "30px", "backgroundColor" : "#888888"});　//同时设置多个属性
</pre>
1. 如果值是数字，将会被自动转化为像素值
2. 在css()方法中，如果属性中带有"-"符号，例如font-size和background-color属性，如果在设置这些属性的值的时候不带引号，那么就要用驼峰写法，例如：
<code>$("p").css({fontSize : "30px", backgroundColor : "#888888"})</code>
如果带上了引号，两种写法都可以。

- <code>$("p").css("opacity", "0.5"); //对透明度设置</code>

- <code>$(element).css("height"); //获取某个元素的height属性</code>

- height()
<code>
$("p").height(); //获取某个元素的高度
$("p").height(100); //设置p元素的高度值为100px
$("p").height("10em"); //设置p元素的高度值为10em
</code>

> (1)在JQuery1.2版本以后的height(

)方法可以用来获取window和document的高度。(2)css("height")和height()的区别是：css()方法获取的高度值与样式的设置有关，可能会得到"auto"，也可能得到"10px"之类的字符串；而height()方法获取的高度值则是在页面中的实际高度，与样式的设置无关，而且不带单位。

- width()
<pre>
$("p").width(); //获取p元素的宽度值
$("p").width("400px"); //设置p元素的宽度值为400px
</pre>

#### CSS-DOM常用方法
- offset() //获取当前元素在当前师徒的相对偏移，其中返回的对象包含两个属性，即top和left，***它只对可见元素有效***。
<pre>
var offset = $("p").offs(); //获取p元素的offset()
var left = offset.left; //获取左偏移
var top = offset.top; //获取右偏移
</pre>

- scrollTop() & scrollLeft() //这两个方法的作用分别是获取元素的滚动条距顶端的距离和距左侧的距离。
<pre>
var $p = $("p");
var scrollTop = $p.scrollTop(); //获取元素的滚动条距顶端的距离
var scrollTop = $p.scrollTop(300); //元素的垂直滚动条滚动到指定的位置
var scrollLeft = $p.scrollLeft(); //获取元素的滚动条距左侧的距离
var scrollLeft = $p.scrollLeft(300); //元素的横向滚动条滚动到指定的位置
</pre>

## JQuery中的事件和动画

### JQuery中的事件

#### 加载DOM

|  | $(document).ready() | window.onload |
| :------------- | :------------- |
| 执行时机 | 网页中所有的元素(包括元素的所有关联文件)完全加载到浏览器后才执行，即JavaScript此时才可以访问网页中的任何元素。| DOM完全就绪时可以被调用(此时，网页的所有元素对JQuery而言都是可以访问的，但是，这并不是意味着这些元素关联的文件都已经下载完毕 |
| 多次使用 | windows.onload = one; windows.onload = two;只执行第二个函数two。解决方法windows.onload = function() { one(); two;} | $(document).reday(function{one();}; $(document).reday(function{two();};)两个都执行 |
| 简写方式 | 无 | $(document).ready(function(){}) => $().ready(function(){}) => $(function(){}) |

#### 事件绑定
- .bind(type[, data], fn) [参见](http://api.jquery.com/bind/)
  - type: 事件类型，包括：blur, focus, load, resize, scroll, unload, click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup和error...，当然还可以自定义名称
  - data: 可选参数，作为event.data属性值传递给事件对象的额外数据对象。
  - fn: 用来绑定的处理函数
 > JQuery中的事件绑定类型比普通的JavaScript事件绑定类型少了"on".例如: JQuery click事件, JavaScript onclick()
 - 简写绑定事件
 .事件名(function(){})，例如：.mouseover(function(){})

#### 合成事件
 - .hover(enter,leave) //模拟光标悬停事件
 当光标移动到元素上时，会触发第一个函数(enter)；当光标移出这个元素时，会触发指定的第二个函数(leave)
 > (1)CSS中有伪类选择符，例如“：hover”,当用户光标悬停在元素上时，会改变元素的外观。在大多数符合规范的浏览器中，味蕾选择符可以用于任何元素。然而在IE6浏览器中，伪类选择符仅可用于超链接元素。对于其他元素，可以使用jQuery的hover().(2)hover()方法准确的来说是替代jQuery中的bind("mouseenter")和bind("mouseleave")，而不是替代bind("mouseover")和bind("mouseout").因此当需要触发hover()方法的第二个函数，需要trigger("mouseover")来触发，而不是trigger("mouseout")

 - toggle(fn1,fn2,...,fnN) //模拟鼠标连续单击事件
 每次单击依次触发fn1,fn2...,fnN,随后的每次单击都重复对这几个函数的轮番调用

#### 事件冒泡
 - 什么是事件冒泡
 在页面上可以有多个事件，也可以多个元素响应同一个事件。当嵌套元素的内层元素和外层元素同时绑定了同一个事件例如click事件，当点击内层元素时，外层元素依次触发。
 - 事件冒泡引发的问题
   - 事件对象
   $("element").bind("click", function(event){//event:事件对象})
   - 停止事件冒泡
   <pre>
   $("element").bind("click",funciton(event){
       event.stopPropagation();//停止事件冒泡   
   })
   </pre>
   - 阻止默认行为 //例如：表单的提交按钮，点击提交表单就会提交，或者单击超链接后会跳转
   event.preventDefault()
   - 事件捕获
   事件捕获与事件冒泡正好是相反的两个过程，事件捕获是从最顶端往下开始触发。jQuery并不支持事件捕获，只能使用原声的JavaScript。

#### 事件对象的属性
- event.type() //获取事件的类型
- event.preventDefault() //阻止默认的事件行为
- event.stopPropagation() //阻止事件的冒泡
- event.target() //获取到触发事件的元素
- event.relatedTarget()
- event.pageX() / event.pageY() //获取到光标相对于页面的x坐标和y坐标
- event.which() //在鼠标单击事件中获取到鼠标的左，中，右建；在键盘事件中获取键盘的按键
- event.metaKey() //为键盘事件获取ctrl按键
- event.originalEvent() //指向原始的事件对象

#### 移除事件
- .unbind([type] [,data]) //移除元素上以前注册的事件
  - type: 事件类型，如果没有参数，则删除所有绑定的事件，如果提供参数，则只删除该类型的绑定事件
  - data: 绑定时的处理函数，如果有则只删除有这个特定的事件处理函数，可以给绑定的函数指定一个变量
- .one(type, [data], fn) //处理函数被触发一次之后立即被删除

#### 模拟操作

#### 常见模拟
.trigger("click") => .click() //模拟单击效果

##### 触发自定义事件
.trigger(元素绑定的自定义事件) //触发自定义事件

##### 传递数据
- .trigger(type [,data]) //data 传递参数给事件的回调函数

##### 执行默认操作
- .tiggerHandler("focus") //触发绑定的focus事件，.trigger("focus")执行浏览器默认操作，不仅会触发元素绑定的focus事件，也会是input元素本身得到焦点

##### 其他用法
- .bind("事件1 事件2 ... 事件n", function(){}) //一次绑定多个事件
- 添加事件命名空间，便于管理 //.bind("click.plugin") .unbind(".plugin")删除指定的命名空间内的事件
- 相同事件名称，不同命名空间执行方法 //.trigger("click")会触发click事件和click.plugin[带有命名空间的事件]，.trigger("click!")只会触发click事件

### JQuery中的动画

#### show() & hide()
- .hiden() <=> .css("display", "none")
- .show() //当把元素隐藏之后，可以使用.show()方法将元素的display样式设置为先前的显示状态
> 用jQuery做动画效果要求在标准模式下，否则可能会引起动画抖动。标准模式即要求文件头部包含如下的DTD定义:
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

- .show("slow") / .hiden(1000) //给show()指定一个速度参数

#### fadeIn() & fadeOut() //改变元素的不透明度
- .fadeOut() //在指定的一段事件内降低元素的不透明度，直至元素完全消失("display", "none")
- .fadeIn() //与fadeOut相反

#### slideUp() & slideDown //改变元素的高度
- .slideUp //元素由下至上缩短隐藏
- .slideDown //元素由上至下延伸显示

> jQuery中的任何动画效果，都可以指定3种速度参数，即"slow", "normal"和"fast"(事件长度分别是0.6秒，0.4秒 和 0.2 秒)。 当使用速度关键字时要加引号，例如.show("slow"),如果用数字作为时间参数时就不需要加引号，例如.show(1000).

#### .animate() //自定义动画方法
- .animate(params, speed, callback);
  - params: 一个包含样式属性及值的映射，比如{property1 : "value1", property2 : "value2", ...}
  - speed: 速度参数，可选
  - callback:在动画完成时执行的函数，可选
- 在动画参数值前加上"-=" / "+="即可实现累减或累加动画 // 例如：{"left" : "+=200px"}
- 多重动画
  - {left : "200px", width : "500px"} //同时执行多个动画
  - .animate({left : "200px"}, 3000) .animate({width : "500px"}, 3000)//顺序执行多个动画
- 在动画结束之后使用.css()改变元素的样式，需要将.css()放在.animate()的回调函数中，因为.css()并不会加入到动画队列，如果和.animate()放在一起执行会在动画一开始就执行.css(),而jQuery其他的动画方法会加入到动画队列

> callback回调函数适用于jQuery所有的动画效果方法

#### 停止动画和判断是否处于动画状态

##### 停止元素的动画
- .stop([clearQueue] [, gotoEnd]);
  - clearQueue 是否要清空未执行完的动画队列，可选，Boolean
  - gotoEnd 是否直接将正在执行的动画跳转到末状态，可选，Boolean
 > 直接使用.stop()方法，则会立即停止当前正在进行的动画，如果接下来还有动画等待继续进行，则以当前状态开始接下来的动画。

##### 判断元素是否处于动画状态
- .is(":animated")

#### 其他动画方法
- .toggle() //可以切换元素的可见性

- .slideToggle() //通过高度变化来切换元素的可见性，这个动画效果只会调整元素的高度

- fadeTo() //把元素的不透明度以渐进方式调整到指定的值。

## jQuery对表单，表格的操作及更多应用

### 表单应用

#### [单行文本框应用](001.html)

#### [多行文本框应用](002.html)

#### [复选框应用](003.html)

#### [下拉框应用](004.html)

#### [表单验证](005.html)

### 表格应用

#### [表格变色](006.html)

#### [表格展开关闭](007.html)

#### [表格内容筛选](008.html)

### 其他应用

#### [网页文字大小](009.html)

#### [网页选项卡](010.html)

#### [网页换肤](011.html)

## jQuery与Ajax

### Ajax的优势和不足

#### Ajax的优势
1. 不需要插件支持
2. 优秀的用户体验
3. 提高Web程序的性能
4. 减轻服务器和带宽的负担

#### Ajax的不足
1. 浏览器对XMLHttpRequest对象的支持度不足
2. 破坏浏览器前进、后退按钮的正常功能
3. 对搜索引擎的支持的不足
4. 开发和调试工具的缺乏

### jQuery中的Ajax

#### load()

1. 载入HTML文档
> .load(url, [, data] [, callback])

| 参数名称 | 类型     | 说明 |
| :------------- | :------------- |
| url | String| 请求HTML页面的URL地址 |
| data(可选) | Object | 发送至服务器的key/value数据 |
| callback(可选) | Function | 请求完成时的回调函数，无论请求成功或失败 |

2. 筛选载入的HTML文档
例如：$("resText").load("test.html .para");之家在test.html中class位para的内容

3. 传递方式
- 指定data，以POST方式传递
- 没有data，以GET方式传递

4. 回调函数参数
- responseText 请求返回的内容
- textStatus 请求状态：success,error,notmodified,timeout
- XMLHttpRequest XMLHttpRequest对象

#### $.get() & $.post()
1.get()
> $.get(url [, data] [, callback] [, type])

| 参数名称 | 类型 | 说明 |
| :------------- | :------------- |
| url | String | 请求的HTML页的URL地址 |
| data(可选) | Object | 发送至服务器的key:value数据会作为QueryString附加到请求URL中 |
| callback(可选) | Function | 载入成功时回调函数(只有当Response的返回状态是success时才调用该方法)自动将请求结果和状态传递给该方法 |
| type(可选) | String | 服务器端返回内容的格式，包括xml、html、script、json、text和_default |

回调函数参数
1. data 返回的内容
2. textStatus 请求状态：success,error,notmodified,timeout

2. $.post()
>结构和使用方式与$.get()相同

3. $.get() 和 $.post()区别
- GET请求会将参数跟在URL后进行传递，而POST请求则是作为HTTP消息的实体内容发送给WEB服务器。
- GET方式对传输的数据有大小限制(通常不能大于2KB)， 而POST理论上不受限制
- GET方式请求的数据会被浏览器缓存起来，POST相对来说可以避免这些问题
- GET方式和POST方式传递的数据在服务器端的获取也不想同

#### $.getScript()方法和$.getJson()方法
1. $.getScript()
- path js文件路径
- callback(可选) js文件成功载入后运行

2. $.getJson()
用法同$.getScript

3. $.each() //全局函数
- 数组/对象
- 回调函数
  - 对象的成员或数组的索引
  - 对应变量或内容
#### $.ajax()
>$.ajax(options)

该方法只有一个参数，参数以key：value的形式存在，所有参数都是可选的。

常用参数：

| 参数名称 | 类型 | 说明 |
| :------------- | :------------- |
| url | String | (默认位当前页地址) 发送请求的地址 |
| type | String | 请求方式，默认为GET。|
| timeout | Number| 设置请求超时时间(毫秒)。此设置将覆盖$.ajaxSetup()方法的全局设置 |
| data | Object或String | 发送至服务器的数据。如果不是字符串，将自动转换位为字符串格式。对象必须位key：value格式 |
| dataType | String | 预期服务器返回的数据类型。如果不指定，jQuery将自动跟据HTTP包MIME信息返回responseXML或responseText,并作为回调函数参数传递 |
| beforeSend | Function | 发送请求前可以修改XMLHttpRequest对象的函数。beforeSend函数如果返回false可以取消本次Ajax请求。XMLHttpRequest对象是唯一的参数 |
| complete | Function | 请求完成后调用的回调函数(请求成功或失败时均调用)。参数：XMLHttpRequest对象和一个描述成功请求类型的字符串 |
| success | Function | 请求成功后调用的回调函数。参数：由服务器返回，并跟据dataType参数进行处理后的数据。描述状态的字符串。|
| error | Function | 请求失败时被调用的函数。参数：XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。|
| global | Boolean | 默认为true。表上是否触发全局Ajax事件。|

### 序列化元素

1. .serialize()
将DOM元素内容序列化为字符串，用于Ajax请求
> Ajax请求data参数不仅可以使用键值对，还可以直接拼接url字符串

2. .serializeArray()
将DOM元素序列化，返回JSON格式的数据

3. $.param()
.serialize()的核心。用来对一个数据或对象按照key/value进行序列化，转换位字符串a=1&b=2...

### jQuery中的Ajax全局事件
>全局事件，无论创建它们的代码位于何处，只要发生Ajax请求就会触发它们。

| 方法名称 | 说明 |
| :------------- | :------------- |
| .ajaxStart | Ajax请求开始时触发 |
| .ajaxStop | Ajax请求结束时触发 |
| .ajaxComplete(callback) | Ajax请求完成时执行的函数 |
| .ajaxError(callback) | Ajax请求发生错误时执行的函数，捕捉到的错误可以作为最后一个参数传递 |
| .ajaxSend(callback) | Ajax请求发生前执行的函数 |
| .ajaxSuccess(callback) | Ajax请求成功时执行的函数 |

> 如果想使某个Ajax请求不受全全局方法的应吸纳给，可以在使用$.ajax(options)方法是，将参数global设置为false

### 基于jQuery的Ajax聊天室程序

## 插件的使用和写法

### jQuery表单验证插件--Vaildation

### jQuery表单插件 -- Form

### 动态绑定事件插件 -- livequery

### jQuery UI插件

### 管理Cookie的插件 -- Cookie

### 编写jQuery插件

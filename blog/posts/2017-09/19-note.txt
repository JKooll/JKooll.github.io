# 使用session实现登录认证

## 简单认证
### 创建文件
创建一个index.php文件

## 将下面的html代码加入到index.php文件
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Session Auth</title>
    <style>
        #main {
            border: 1px solid #666666;
            width: 80%;
            margin: 20px auto;
            text-align: center;
            padding: 20px;
        }

        input {
            display: block;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id="main">
        <div id="login">
            <form action="main.php">
                <input type="hidden" name="action" value="login">
                <input type="text" name="username" placeholder="username" />
                <input type="text" name="password" placeholder="password" />
                <button type="submit">Login</button>
            </form>
        </div>

        <div>
            <form action="main.php">
                <input type="hidden" name="action" value="logout" hidden>
                <button type="submit">Logout</button>
            </form>
        </div>
    </div>
</body>
</html>
```

### 通过action判断当前用户行为
```php
<?php
$action = @$_GET['action'];
if ($action) {
    echo $action;
} else {
    echo "没有获取action!!!!";
}
?>
```
将上面的代码插入到前面html代码的前面，用浏览器测试login和logout按钮。

### 如果上面显示正常的结果，则将上面的php代码替换成下面的代码
```php
<?php
session_start();
$action = @$_GET['action'];

switch($action) {
    case 'login':
        login($_GET['username'], $_GET['password']);
        break;
    case 'logout':
        logout();
        break;
    default: 
        hasLogined();
}

function login($username, $password)
{
    $_SESSION['username'] = $username;
    $_SESSION['password'] = $password;
}

function logout()
{
    $_SESSION['username'] = '';
    $_SESSION['password'] = '';
}

function hasLogined()
{
    if (!empty($_SESSION['username']) && !empty($_SESSION['password'])) {
        echo '已经登录过了';
        return true;
    }

    echo '未登录';
    return false;
}
?>
```
如果显示未登录，则代码运行成功。

### 将html代码替换成下面这样
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Session Auth</title>
    <style>
        #main {
            border: 1px solid #666666;
            width: 80%;
            margin: 20px auto;
            text-align: center;
            padding: 20px;
        }

        input {
            display: block;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id="main">
        <?php if (!hasLogined()): ?>

            <div id="login">
                <form action="main.php">
                    <input type="hidden" name="action" value="login">
                    <input type="text" name="username" placeholder="username" />
                    <input type="text" name="password" placeholder="password" />
                    <button type="submit">Login</button>
                </form>
            </div>

        <?php else: ?>

        <div>
            <form action="main.php">
                <input type="hidden" name="action" value="logout" hidden>
                <button type="submit">Logout</button>
            </form>
        </div>

        <?php endif; ?>
    </div>
</body>
</html>
```

### 最终文件
- <a href="posts/2017-09/19-note/session.php" download="session.php">session.php</a>

## 同一目录下，独立认证机制

### What?
这个认证主要只用于同一域名下并且不能更改二级域名，需要两种不同的认证机制的情况。分别给两个项目设置不同
的session_name,这样就相当于当用户分别进入这两个系统的时候需要分别进行认证。

### 创建如下目录结构
![](posts/2017-09/19-note/01.png)

### 最终文件
- <a href="posts/2017-09/19-note/a_init.php" download="a_init.php">a_init.php => /a/init.php</a>
- <a href="posts/2017-09/19-note/b_init.php" download="b_init.php">b_init.php => /b/init.php</a>
- <a href="posts/2017-09/19-note/config.php" download="config.php">config.php => /config.php</a>